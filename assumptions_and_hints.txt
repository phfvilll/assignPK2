
CodeAssignment: CONFERENCE TRACK MANAGEMENT

Assumptions and Hints

@author: Philipp Kraatz

-----------------------------------------------------------------------------------------

assumptions about the problem and the resulting test cases:

+ convert proposals to a schedule
 \--> test case to pass: 
		given: array of proposal-lines; 
		when: scheduling completed (used method should schedule the talks with the longest duration first); 
		then: array of schedule-lines is received in sequence of used method
  	\--> test name: "test converting proposals to a schedule"; 
		test method: testCreateSchedule()
		test class: ScheduleServiceTest

+ a talk consists of a talk title and a duration
 \--> test case to pass: 
		given: talk; 
		when: initialized; 
		then: talk title and duration of the talk should be accessible
  	\--> test name: "test getting talk title and duration from a title"; 
		test method: testGettingTitleAndDuration()
		test class: TalkTest

+ a track consists of a morning session and an afternoon session.
 \--> test case to pass:
		given: track;
		when: initialized;
		then: morning session and afternoon session of the track should be accessible
  	\--> test name: "test getting the morning session and the afternoon session of a track"; 
		test method: testGetSessions()
		test class: TrackTest

+ multiple tracks are possible
 \--> test case to pass: given: list of talks; when: talks do not fit in one track; then: a new track should be created

+ a new talk is constructed with a proposal-string in the format:
    "[characters without numbers][Free Space][Number]'min'" 
    or 
    "[characters without numbers][Free Space]'lightning'"
 \--> test case to pass: given: proposal; when: proposal parsed; then: no error should be received


+ a morning session starts at 9AM
 \--> test case to pass: given: a morning session; when: initialized; then: start time of session should be 9AM

+ a morning session lasts 3 hours
 \--> test case to pass: given: a morning session; when: initialized; then: time left to schedule of session should be 3 hours(180 minutes)

+ a morning session ends with lunch at 12PM
 \--> test case to pass: given: a morning session; when: initialized; then: last event time of session should be 12PM and last event title should be lunch

+ a morning session contains as many talk as the time constraint fits
 \--> test case to pass: given: list of talks; when: talks scheduled to morning session until no time left; then: sum of talk durations should be less than 3 hours

+ an afternoon session starts at 1PM
 \--> test case to pass: given: an afternoon session; when: initialized; then: start time of session should be 1PM

+ an afternoon session lasts max. 4 hours
 \--> test case to pass: given: an afternoon session; when: initialized; then: time left to schedule should be 4 hours(240 minutes)

+ an afternoon session contains as many talk as the time constraint fits
 \--> test case to pass: given: list of talks; when: talks scheduled to afternoon session until no time left; then: sum of talk durations should be less than 4 hours

+ an afternoon session ends with a Networking Event, earliest time at 4PM, latest time at 5PM, depending on the latest talkend of all tracks
 \--> test case to pass: given: list of tracks; when: when all; then: the time of the last event should be the same in all afternoon sessions between 4PM and 5PM.

+ scheduled talks have to fit in the time constraint of a session
 \--> test case to pass: given: 

+ no demand for fixed order to schedule talks
 \--> test case to pass: given: 

+ if the talk title includes numbers, I ignore the proposal and inform the user about the issue.
 \--> test case to pass: given: 

+ no gap between session. I guess that means also no gap between talks
 \--> test case to pass: given: session; when: a talk ends and another is in the queue; then: start time of new talk should be equal to the end time of the previous talk

+ even if the problem says that all proposal passed an initial screen process, the connection to an user interface a new proposal could come in a incorrect format so I should prevent a possible exception (I will ignore incorrect formatted proposals for planning, but inform the user about the issue)
 \--> test case to pass: given: proposal; when: proposal parsed; then: an error should be received

++added assumptions/test cases for 100% code coverage:

-----------------------------------------------------------------------------------------

assumptions about the implementation:

+ The task was to write a program that fits proposals into the time constraints of a day depending on the assumptions and test cases above.

+ I decided to write the program as a web application in Java (version 11) with the framework Vaadin (version 14.6.4) based on Spring Boot (version 2.5.2) and Maven (version 4.0.0).

+ In case of testing I used Junit Jupiter (version 5.7.2) whose dependency comes with the spring-boot-starter-test-dependency. 

+ In order to avoid overengineering, there is no database, because it is not necessary at all. As the task demands only to schedule a given input of proposals(not to safe them or handle them by a special service), I tried to keep the solution as simple as possible.

+ Therefore I implemented only 5 classes (besides the main-class to run the app). One class for the scheduling service, 3 classes for my object model consisting of tracks, sessions, talks and one class for the user interface.

+ The class MainView is mapped to the context root of the running application, so it is instantiated when the user connect to the host server in the browser. MainView builds up the user interface and a button-click-listener implements the API of the ScheduleService-Class which is initialized by dependency injection. 

+ ScheduleService provides the method createSchedule(String[] proposals) which parses proposals to convert them into talks, counts errors that occur during parsing, schedules the talks on sessions which belong to tracks, and converts the created schedule into a String-Array to return it.

+ Through the String-Array based interface, the API of ScheduleService could also easily communicate with Json. And If there would be a need to connect a database, the classes of the object model could be simply modified to serve as entities for the database. But for now to keep everything appropriate and to implement only the given facts of the problem I tried to leave all unnecessary complexity behind.

-----------------------------------------------------------------------------------------

hints:

+ I commited every major step to show my development progress.
--> First I set up the project with the spring initializr.
--> Then I created the MainView-class in the userinterface-package and implemented the user interface including unit testing.
--> After that I implemented my object model that consists of the Track-, Session-, TalkRecord- and Talk-class in the service.model-package including unit testing.
--> Now I could implement the ScheduleService in three major steps in the service-package. The first step was to parse the incoming String-Array to list them as talks and count the errors that occur while doing so including unit testing.
--> The second step was to schedule the list of unplanned talks to a list of tracks including unit testing.
--> The third step was to convert the schedule(list of tracks) to a printable list of Strings and assign it together with the counted errors to a return value as a String-Array including unit testing.
--> Then I added a click-listener to the UI's schedule button and implemented the API in it including unit testing.
--> After that I could make the integration test with the maven-failsafe-plugin.
--> Last but not Least I added this textfile to the project.

+ I used IntelliJ IDEA 2021.1.3 (Ultimate Edition) to build the app.

+ the node_modules and target-folder are not uploaded to the repository. So the project has to be rebuild including a npm install (node required as well as a JDK and maven) before it is runnable.

+ The Spring Boot Application runs on a local Apache Tomcat Test-Server on port 8080. So it is accessible in the browser on: localhost:8080

-----------------------------------------------------------------------------------------
